import time
from langgraph.graph import StateGraph, END
from pydantic import BaseModel
from typing import Optional, Dict
from playwright.sync_api import sync_playwright
from bs4 import BeautifulSoup

# ✅ Step 1: Define State Schema
class TrackingState(BaseModel):
    mawb_number: str
    tracking_result: Optional[str] = None

# ✅ Step 2: User Input Agent
def user_input_agent(state: TrackingState) -> Dict:
    print(f"Received MAWB Number: {state.mawb_number}")
    return {"mawb_number": state.mawb_number}

# ✅ Step 3: Web Navigation & Full Page Scraping Agent
def track_cargo(state: TrackingState) -> Dict:
    with sync_playwright() as p:
        browser = p.chromium.launch(headless=False)  # Use headless=True for silent execution
        page = browser.new_page()
        
        # Open tracking website
        url = "https://www.track-trace.com/aircargo"
        page.goto(url)
        page.wait_for_selector("input[placeholder='Enter number...']", timeout=15000)  # ✅ Wait for input field
        
        # Enter MAWB number
        page.fill("input[placeholder='Enter number...']", state.mawb_number)

        # Click "Track with options"
        button_selector = "#wc-multi-form-button_options"
        page.wait_for_selector(button_selector, timeout=10000)
        page.click(button_selector)

        # ✅ Wait for page to load completely
        page.wait_for_load_state("networkidle")  # Ensures full page has loaded

        # ✅ Extract entire HTML content to ensure we capture all tracking data
        soup = BeautifulSoup(page.content(), "html.parser")

        # ✅ Try different methods to locate tracking results
        tracking_div = soup.find("div", class_="track-res-base track_res")  # Preferred div
        if tracking_div:
            results = tracking_div.get_text(separator="\n", strip=True)
        else:
            # If preferred div is not found, extract all page text
            results = soup.get_text(separator="\n", strip=True)

        browser.close()
        return {"tracking_result": results}

# ✅ Step 4: Output Agent
def output_agent(state: TrackingState) -> Dict:
    print("\nTracking Results:")
    print(state.tracking_result)
    return {}

# ✅ Step 5: Create LangGraph Workflow
graph = StateGraph(TrackingState)

# Add nodes (agents)
graph.add_node("User Input", user_input_agent)
graph.add_node("Navigation", track_cargo)
graph.add_node("Output", output_agent)

# Define workflow
graph.set_entry_point("User Input")
graph.add_edge("User Input", "Navigation")
graph.add_edge("Navigation", "Output")
graph.add_edge("Output", END)

# ✅ Step 6: Compile and Run
agent_graph = graph.compile()

mawb_number = input("Enter MAWB Number: ")
initial_state = TrackingState(mawb_number=mawb_number)
result = agent_graph.invoke(initial_state)

print("\nFinal Extracted Tracking Data:")
print(result["tracking_result"])
