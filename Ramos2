from typing import Annotated
from typing_extensions import TypedDict
from langchain_community.utilities import WikipediaAPIWrapper
from langchain_community.tools import WikipediaQueryRun
from langgraph.graph.message import add_messages
from langgraph.graph import StateGraph, START, END
from langchain_groq import ChatGroq
from dotenv import load_dotenv
from langgraph.prebuilt import ToolNode, tools_condition
import os
from selenium import webdriver

# Load environment variables
load_dotenv()
groq_api_key = os.getenv("GROQ_API_KEY")

# Initialize Wikipedia tool
wiki_wrapper = WikipediaAPIWrapper(top_k_results=1, doc_content_chars_max=300)
wiki_tool = WikipediaQueryRun(api_wrapper=wiki_wrapper)

tools = [wiki_tool]

# Define LangGraph state
class State(TypedDict):
    messages: Annotated[list, add_messages]
    wikipedia_url: str  # Store Wikipedia URL for screenshot agent

graph_builder = StateGraph(State)

# Initialize LLM with tools
llm = ChatGroq(groq_api_key=groq_api_key, model_name="Gemma2-9b-It")
llm_with_tools = llm.bind_tools(tools=tools)

# Chatbot function
def chatbot(state: State):
    response = llm_with_tools.invoke(state["messages"])
    
    # Extract Wikipedia URL if found
    wiki_url = None
    for tool_response in response.tool_outputs:
        if "wikipedia.org/wiki" in tool_response.content:
            wiki_url = tool_response.content.split("\n")[0]  # Extract first URL
    
    return {"messages": [response], "wikipedia_url": wiki_url}

# Screenshot Agent
def screenshot_agent(state: State):
    wikipedia_url = state.get("wikipedia_url")

    if wikipedia_url:
        options = webdriver.ChromeOptions()
        options.add_argument("--headless")
        options.add_argument("--window-size=1920x1080")

        driver = webdriver.Chrome(options=options)
        driver.get(wikipedia_url)

        screenshot_path = "wikipedia_screenshot.png"
        driver.save_screenshot(screenshot_path)
        driver.quit()

        return {"messages": [("system", f"Screenshot saved at {screenshot_path}")]}
    
    return {"messages": [("system", "No Wikipedia page found to capture.")]}

# Add nodes to the graph
graph_builder.add_node("chatbot", chatbot)
graph_builder.add_node("screenshot_agent", screenshot_agent)
tool_node = ToolNode(tools=tools)
graph_builder.add_node("tools", tool_node)

# Define graph execution flow
graph_builder.add_conditional_edges("chatbot", tools_condition)
graph_builder.add_edge("tools", "chatbot")
graph_builder.add_edge(START, "chatbot")
graph_builder.add_edge("chatbot", "screenshot_agent")  # Call screenshot agent after chatbot
graph_builder.add_edge("screenshot_agent", END)

graph = graph_builder.compile()

# --- Dynamic User Input Loop ---
print("\nChatbot is running. Type 'exit' to quit.\n")

while True:
    user_input = input("You: ")
    
    if user_input.lower() == "exit":
        print("Goodbye!")
        break  # Exit the loop

    # Run the chatbot with the user input
    events = graph.stream(
        {"messages": [("user", user_input)]}, stream_mode="values"
    )

    for event in events:
        event["messages"][-1].pretty_print()
