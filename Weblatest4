from crewai import Agent, Task, Crew
from crewai_tools import ScrapeWebsiteTool
from langchain.tools import Tool  # âœ… Import CrewAI Tool wrapper
import os
from langchain_google_vertexai import VertexAI
import undetected_chromedriver.v2 as uc
from selenium.webdriver.common.by import By
from PIL import Image

# âœ… Set Google Cloud Credentials
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "email-extraction-381718-3f73208ce3b71.json"

# âœ… Initialize LangChain's VertexAI LLM (for summarization)
llm = VertexAI(model_name="gemini-1.5-pro", temperature=0.7)

# âœ… Define website to scrape
site = 'https://www.icc-cricket.com/rankings'
web_scrape_tool = ScrapeWebsiteTool(website_url=site)

# âœ… Convert Screenshot Function into a CrewAI Tool
def take_screenshot(url):
    """ðŸ“¸ Captures a screenshot of the website and saves it."""
    options = uc.ChromeOptions()
    options.add_argument("--start-maximized")  
    driver = uc.Chrome(options=options)
    
    driver.get(url)
    screenshot_path = "screenshot.png"
    driver.save_screenshot(screenshot_path)
    driver.quit()
    
    return f"Screenshot saved at {screenshot_path}"

# âœ… Wrap Screenshot Function in a Tool
screenshot_tool = Tool(
    name="Website Screenshot Tool",
    func=take_screenshot,
    description="Takes a full-page screenshot of a given website URL."
)

# âœ… Agent 1: Scraper Agent (Extracts & Summarizes Content)
scraper_agent = Agent(
    role='Web Scraper',
    goal='Scrape website content and summarize it concisely',
    backstory='''You are an expert web scraper with AI summarization skills.
                 Your job is to extract all important content from a given website 
                 and summarize it for easy reading.''',
    tools=[web_scrape_tool],
    verbose=True,
    llm=llm  # âœ… Uses Gemini 1.5 for summarization
)

# âœ… Agent 2: Screenshot Agent (Captures & Saves Screenshot)
screenshot_agent = Agent(
    role='Screenshot Capturer',
    goal='Take a screenshot of the website and save it.',
    backstory='''You are a web automation expert. Your task is to 
                 capture a high-quality screenshot of the target website 
                 and store it for future reference.''',
    tools=[screenshot_tool],  # âœ… Corrected: Now using a CrewAI Tool
    verbose=True,
    llm=None  # No LLM needed for screenshots
)

# âœ… Task 1: Scraping & Summarization Task
scraper_task = Task(
    description='Scrape the website and summarize the extracted content.',
    expected_output='A summarized version of the websiteâ€™s content.',
    agent=scraper_agent,
    output_file='summary.txt'
)

# âœ… Task 2: Screenshot Capturing Task
screenshot_task = Task(
    description='Take a screenshot of the website and save it.',
    expected_output='A full-page screenshot of the website.',
    agent=screenshot_agent,
    output_file='screenshot.png'
)

# âœ… Assemble a Multi-Agent Crew
crew = Crew(
    agents=[scraper_agent, screenshot_agent],
    tasks=[scraper_task, screenshot_task],
    verbose=True,
)

# âœ… Execute AI-powered tasks
result = crew.kickoff()
print(result)

# âœ… Save the results
with open('results.txt', 'w') as f:
    f.write(str(result))

# âœ… Display Screenshot
img = Image.open("screenshot.png")
img.show()
