from typing import Annotated
from typing_extensions import TypedDict
from langchain_community.tools import Tool
from langgraph.graph.message import add_messages
from langgraph.graph import StateGraph, START, END
from langchain_groq import ChatGroq
from dotenv import load_dotenv
import os
import requests
from bs4 import BeautifulSoup
from duckduckgo_search import DDGS  # DuckDuckGo Search API

load_dotenv()
groq_api_key = os.getenv("GROQ_API_KEY")

# Function to perform DuckDuckGo search and get the top result URL
def duckduckgo_search(query):
    with DDGS() as ddgs:
        results = list(ddgs.text(query, max_results=1))  # Fetch top search result
        if results:
            return results[0]["href"]  # Get the first result's URL
        return None

# Function to scrape content from a given URL
def scrape_website(url):
    headers = {"User-Agent": "Mozilla/5.0"}
    try:
        response = requests.get(url, headers=headers, timeout=5)
        if response.status_code == 200:
            soup = BeautifulSoup(response.text, "html.parser")
            paragraphs = soup.find_all("p")
            text_content = " ".join([p.get_text() for p in paragraphs[:5]])  # Extract first 5 paragraphs
            return text_content.strip() if text_content else "No relevant content found."
        else:
            return "Failed to retrieve website content."
    except requests.RequestException:
        return "Error fetching website content."

# Custom Google Search Tool for LangChain
def web_scraper_tool(query: str):
    website_url = duckduckgo_search(query)
    if website_url:
        content = scrape_website(website_url)
        return f"Source: {website_url}\n\nExtracted Content:\n{content}"
    else:
        return "No relevant website found for the query."

# Define the tool
web_scraper_tool = Tool(name="WebScraper", func=web_scraper_tool, description="Searches web and scrapes relevant content.")

tools = [web_scraper_tool]

# LangGraph Application
class State(TypedDict):
    messages: Annotated[list, add_messages]

graph_builder = StateGraph(State)

llm = ChatGroq(groq_api_key=groq_api_key, model_name="Gemma2-9b-It")
llm_with_tools = llm.bind_tools(tools=tools)

# Define the chatbot function
def chatbot(state: State):
    return {"messages": [llm_with_tools.invoke(state["messages"])]}

# Add nodes and edges to the graph
graph_builder.add_node("chatbot", chatbot)
tool_node = Tool(name="WebScraper", func=web_scraper_tool, description="Search and scrape relevant website content")
graph_builder.add_node("tools", tool_node)

graph_builder.add_conditional_edges("chatbot", lambda x: "tools")
graph_builder.add_edge("tools", "chatbot")
graph_builder.add_edge(START, "chatbot")

graph = graph_builder.compile()

# Interactive Chat
while True:
    user_input = input("You: ")
    if user_input.lower() in ["exit", "quit"]:  # Exit Condition
        print("Chatbot: Goodbye!")
        break
    events = graph.stream({"messages": [("user", user_input)]}, stream_mode="values")

    for event in events:
        event["messages"][-1].pretty_print()
